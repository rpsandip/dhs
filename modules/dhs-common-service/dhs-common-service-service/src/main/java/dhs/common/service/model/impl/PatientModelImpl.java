/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package dhs.common.service.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import dhs.common.service.model.Patient;
import dhs.common.service.model.PatientModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Patient service. Represents a row in the &quot;DHS_Patient&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link PatientModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PatientImpl}.
 * </p>
 *
 * @author sandip.patel
 * @see PatientImpl
 * @see Patient
 * @see PatientModel
 * @generated
 */
@ProviderType
public class PatientModelImpl extends BaseModelImpl<Patient>
	implements PatientModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a patient model instance should use the {@link Patient} interface instead.
	 */
	public static final String TABLE_NAME = "DHS_Patient";
	public static final Object[][] TABLE_COLUMNS = {
			{ "patientId", Types.BIGINT },
			{ "lrUserId", Types.BIGINT },
			{ "mspNo", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("patientId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("lrUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mspNo", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table DHS_Patient (patientId LONG not null primary key,lrUserId LONG,mspNo VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DHS_Patient";
	public static final String ORDER_BY_JPQL = " ORDER BY patient.patientId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DHS_Patient.patientId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(dhs.common.service.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.dhs.common.service.model.Patient"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(dhs.common.service.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.dhs.common.service.model.Patient"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(dhs.common.service.service.util.ServiceProps.get(
				"lock.expiration.time.dhs.common.service.model.Patient"));

	public PatientModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _patientId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPatientId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _patientId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Patient.class;
	}

	@Override
	public String getModelClassName() {
		return Patient.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("patientId", getPatientId());
		attributes.put("lrUserId", getLrUserId());
		attributes.put("mspNo", getMspNo());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long patientId = (Long)attributes.get("patientId");

		if (patientId != null) {
			setPatientId(patientId);
		}

		Long lrUserId = (Long)attributes.get("lrUserId");

		if (lrUserId != null) {
			setLrUserId(lrUserId);
		}

		String mspNo = (String)attributes.get("mspNo");

		if (mspNo != null) {
			setMspNo(mspNo);
		}
	}

	@Override
	public long getPatientId() {
		return _patientId;
	}

	@Override
	public void setPatientId(long patientId) {
		_patientId = patientId;
	}

	@Override
	public long getLrUserId() {
		return _lrUserId;
	}

	@Override
	public void setLrUserId(long lrUserId) {
		_lrUserId = lrUserId;
	}

	@Override
	public String getLrUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getLrUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setLrUserUuid(String lrUserUuid) {
	}

	@Override
	public String getMspNo() {
		if (_mspNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _mspNo;
		}
	}

	@Override
	public void setMspNo(String mspNo) {
		_mspNo = mspNo;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Patient.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Patient toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Patient)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PatientImpl patientImpl = new PatientImpl();

		patientImpl.setPatientId(getPatientId());
		patientImpl.setLrUserId(getLrUserId());
		patientImpl.setMspNo(getMspNo());

		patientImpl.resetOriginalValues();

		return patientImpl;
	}

	@Override
	public int compareTo(Patient patient) {
		long primaryKey = patient.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Patient)) {
			return false;
		}

		Patient patient = (Patient)obj;

		long primaryKey = patient.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Patient> toCacheModel() {
		PatientCacheModel patientCacheModel = new PatientCacheModel();

		patientCacheModel.patientId = getPatientId();

		patientCacheModel.lrUserId = getLrUserId();

		patientCacheModel.mspNo = getMspNo();

		String mspNo = patientCacheModel.mspNo;

		if ((mspNo != null) && (mspNo.length() == 0)) {
			patientCacheModel.mspNo = null;
		}

		return patientCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{patientId=");
		sb.append(getPatientId());
		sb.append(", lrUserId=");
		sb.append(getLrUserId());
		sb.append(", mspNo=");
		sb.append(getMspNo());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("dhs.common.service.model.Patient");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>patientId</column-name><column-value><![CDATA[");
		sb.append(getPatientId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lrUserId</column-name><column-value><![CDATA[");
		sb.append(getLrUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mspNo</column-name><column-value><![CDATA[");
		sb.append(getMspNo());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Patient.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Patient.class
		};
	private long _patientId;
	private long _lrUserId;
	private String _mspNo;
	private Patient _escapedModel;
}